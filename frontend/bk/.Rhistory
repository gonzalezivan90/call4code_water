tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("ff", width = "100%", height = "100%")
)
server <- function(input, output,session) {
output$ff <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng = -4, lat= 52.54, zoom = 7)
})
#Show popup on click
observeEvent(input$ff_click, {
click <- input$ff_click
text<-paste("Lattitude ", click$lat, "Longtitude ", click$lng)
proxy <- leafletProxy("ff")
proxy %>% clearPopups() %>%
addPopups(click$lng, click$lat, text)
})
}
shinyApp(ui = ui, server = server)
runApp('IG/server_IG/tests/getPosClick')
runApp('IG/server_IG/tests/getPosClick')
runApp('IG/server_IG/tests/getPosClick')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example1_count')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example1_count')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example1_count')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example3_time&plotly')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example3_time&plotly')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example3_time&plotly')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example3_time&plotly')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example3_time&plotly')
source('Phd/ShinyHoloviz_2021-05-20/Shiny/Example4_downloadTable/app.R')
source('Phd/ShinyHoloviz_2021-05-20/Shiny/Example4_downloadTable/app.R')
source('Phd/ShinyHoloviz_2021-05-20/Shiny/Example4_downloadTable/app.R')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example5_leafletInteraction')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example5_leafletInteraction')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example5_leafletInteraction')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example5_leafletInteraction')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example5_leafletInteraction')
Sys.Date()
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example5_leafletInteraction')
shiny::runApp('IG/server_IG/tests/rgl2')
load('X:/GEDI/2a/rdat_eco/compiled2a_7133198.RData'); nGediPts <- nrow(g2aDf)
library(umap)
rownames(g2aDf) <- NULL
dfSmalll <- g2aDf[sample(nGediPts, 2500000), ]
# Timing stopped at: 5159 244.3 5411
dfRh <- na.omit(dfSmalll[, c('rh_a1_0', 'rh_a1_10', 'rh_a1_20', 'rh_a1_30', 'rh_a1_40',
'rh_a1_50', 'rh_a1_60', 'rh_a1_70', 'rh_a1_80', 'rh_a1_90',
'rh_a1_100')])
#head(dfSmalll)
dim(dfRh)
# Timing stopped at: 5159 244.3 5411
dfRh <- na.omit(dfSmalll[, c('rh_a1_0', 'rh_a1_10', 'rh_a1_20', 'rh_a1_30', 'rh_a1_40',
'rh_a1_50', 'rh_a1_60', 'rh_a1_70', 'rh_a1_80', 'rh_a1_90',
'rh_a1_100')])
#head(dfSmalll)
dim(dfRh)
system.time(uMapDf <- umap(dfRh))
save(uMapDf, dfSmalll, dfRh,
file = paste0('X:/GEDI/2a/rdat_eco/testUMAP', nrow(dfRh),'.RData')
)
ls()
gc()
load('X:/GEDI/2a/rdat_eco/compiled2a_7133198.RData'); nGediPts <- nrow(g2aDf)
library(umap)
rownames(g2aDf) <- NULL
dfSmalll <- g2aDf[sample(nGediPts, 2500000), ]
# Timing stopped at: 5159 244.3 5411
dfRh <- na.omit(dfSmalll[, c('rh_a1_0', 'rh_a1_10', 'rh_a1_20', 'rh_a1_30', 'rh_a1_40',
'rh_a1_50', 'rh_a1_60', 'rh_a1_70', 'rh_a1_80', 'rh_a1_90',
'rh_a1_100')])
#head(dfSmalll)
dim(dfRh)
system.time(uMapDf <- umap(dfRh))
dfSmalll <- g2aDf[sample(nGediPts, 1500000), ]
# Timing stopped at: 5159 244.3 5411
dfRh <- na.omit(dfSmalll[, c('rh_a1_0', 'rh_a1_10', 'rh_a1_20', 'rh_a1_30', 'rh_a1_40',
'rh_a1_50', 'rh_a1_60', 'rh_a1_70', 'rh_a1_80', 'rh_a1_90',
'rh_a1_100')])
#head(dfSmalll)
dim(dfRh)
gc()
load('X:/GEDI/2a/rdat_eco/compiled2a_7133198.RData'); nGediPts <- nrow(g2aDf)
library(umap)
rownames(g2aDf) <- NULL
dfSmalll <- g2aDf[sample(nGediPts, 1500000), ]
# Timing stopped at: 5159 244.3 5411
dfRh <- na.omit(dfSmalll[, c('rh_a1_0', 'rh_a1_10', 'rh_a1_20', 'rh_a1_30', 'rh_a1_40',
'rh_a1_50', 'rh_a1_60', 'rh_a1_70', 'rh_a1_80', 'rh_a1_90',
'rh_a1_100')])
#head(dfSmalll)
dim(dfRh)
system.time(uMapDf <- umap(dfRh))
nrow(dfRh)
save(uMapDf, dfSmalll, dfRh,
file = paste0('X:/GEDI/2a/rdat_eco/testUMAP', nrow(dfRh),'.RData')
)
16542.07/60
16542.07/60/60
dfSmalll <- g2aDf[sample(nGediPts, 2000000), ]
# Timing stopped at: 5159 244.3 5411
dfRh <- na.omit(dfSmalll[, c('rh_a1_0', 'rh_a1_10', 'rh_a1_20', 'rh_a1_30', 'rh_a1_40',
'rh_a1_50', 'rh_a1_60', 'rh_a1_70', 'rh_a1_80', 'rh_a1_90',
'rh_a1_100')])
#head(dfSmalll)
dim(dfRh)
system.time(uMapDf <- umap(dfRh))
str(uMapDf)
save(uMapDf, dfSmalll, dfRh,
file = paste0('X:/GEDI/2a/rdat_eco/testUMAP', nrow(dfRh),'.RData')
)
8/12
8.8/52
8.8/12
Sys.sleep(10)
print (1)
while (TRUE){
Sys.sleep(10)
print (1)
}
library(umap)
load('X:/GEDI/2a/rdat_eco/compiled2a_7133198.RData'); # g2aDf
nGediPts <- nrow(g2aDf)
rownames(g2aDf) <- NULL
shiny::runApp('IG/server_IG/gedivis')
runApp('IG/server_IG/gedivis')
runApp('IG/server_IG/gedivis')
runApp('IG/server_IG/gedivis')
runApp('IG/server_IG/gedivis')
runApp('IG/server_IG/gedivis')
runApp('IG/server_IG/gedivis')
runApp('IG/server_IG/gedivis')
runApp('IG/server_IG/gedivis')
####
library(leaflet)
lat1= 36+runif(n=5,min=-1,max=1)
lon1 =-115+runif(n=5,min=-1,max=1)
lat2= 35+runif(n=5,min=-0.5,max=0.5)
lon2 =-110+runif(n=5,min=-0.5,max=0.5)
lon2 =-110+runif(n=5,min=-0.5,max=0.5)
lat3= 34+runif(n=5,min=-0.5,max=0.5)
lon3 =-112+runif(n=5,min=-0.5,max=0.5)
data_all=rbind(data.frame(Longitude=lon1,Latitude=lat1,Group=sample(c(16,17,18),5,replace = TRUE),condition=sample(c("red","blue","green"),5,replace = TRUE),stringsAsFactors = FALSE),
data.frame(Longitude=lon2,Latitude=lat1,Group=sample(c(16,17,18),5,replace = TRUE),condition=sample(c("red","blue","green"),5,replace = TRUE),stringsAsFactors = FALSE),
data.frame(Longitude=lon3,Latitude=lat1,Group=sample(c(16,17,18),5,replace = TRUE),condition=sample(c("red","blue","green"),5,replace = TRUE),stringsAsFactors = FALSE))
####
library(leaflet)
# A function to create file names
filename <- function(pch,col) paste0(pch, '_', col, '.png')
# A function to build the legend
build_legend <- function(){
paste(sapply(strsplit(unique(paste(c(16,17), 'blue')), " "),
#paste(sapply(strsplit(unique(paste(data_all$Group, data_all$condition)), " "),
function(x){
print(x)
xyz <- paste0("<img src='data:image/png;base64,",
base64enc::base64encode(filename(x[[1]], x[[2]])),
"' width='16'; height='16'> ",
"Group=",x[[1]], " Condition=", x[[2]],
"<br/>" )
xyz
}), collapse = " ")
};
# The plot
leaflet(data_all)%>% addTiles() %>%
addMarkers( data = data_all ) %>%
addControl(html = build_legend(), position = "bottomleft")
# A function to build the legend
build_legend <- function(){
paste(sapply(strsplit(unique(paste(c(16,17), 'blue')), " "),
#paste(sapply(strsplit(unique(paste(data_all$Group, data_all$condition)), " "),
function(x){
swd <- base64enc::base64encode(filename(x[[1]], x[[2]]))
print(swd)
xyz <- paste0("<img src='data:image/png;base64,",
swd,
"' width='16'; height='16'> ",
"Group=",x[[1]], " Condition=", x[[2]],
"<br/>" )
xyz
}), collapse = " ")
};
# The plot
leaflet(data_all)%>% addTiles() %>%
addMarkers( data = data_all ) %>%
addControl(html = build_legend(), position = "bottomleft")
# A function to build the legend
build_legend <- function(){
paste(sapply(strsplit(unique(paste(c(16,17), 'blue')), " "),
#paste(sapply(strsplit(unique(paste(data_all$Group, data_all$condition)), " "),
function(x){
print(x)
swd <- base64enc::base64encode(filename(x[[1]], x[[2]]))
print(swd)
xyz <- paste0("<img src='data:image/png;base64,",
swd,
"' width='16'; height='16'> ",
"Group=",x[[1]], " Condition=", x[[2]],
"<br/>" )
xyz
}), collapse = " ")
};
build_legend()
base64enc::base64encode(filename('16', 'blue'))
system2('gdalwarp')
system2('gdal_calc.py')
system2('gdal_calc.py')
system2('gdal_calc')
system2('gdal_calc.py')
system2('gdalinfo')
system2('gdalinfo')
system2('gdal_calc.py')
system2('C:/OSGeo4W64/apps/Python37/Scripts/gdal_calc.py')
system2('C:/OSGeo4W64/apps/Python37/Scripts/gdal_calc.py')
system2('C:/OSGeo4W64/apps/Python37/Scripts/gdal_calc.bat')
system2('C:/OSGeo4W64/apps/Python37/Scripts/gdal_calc.py')
system2('C:/OSGeo4W64/apps/Python37/Scripts/gdal_calc.bat')
system2('C:/OSGeo4W64/apps/Python37/Scripts/gdal_calc.py')
system2('gdal_calc.py')
system2('gdal_calc.py')
system2('gdal_calc.py')
system2('gdal_calc.py')
system('gdal_calc.py')
system2('gdal_calc.py')
system2('OSGeo4W64')
system2('OSGeo4W64')
system2('OSGeo4W.bat', input  = 'python -m')
system2("OSGeo4W.bat", input ='python -m')
aa
system2('gdal_calc.py')
aa
system2('gdal_calc.py')
system2('gdal_calc.py')
system2('gdal_calc.py')
defTable <- function(aoi_tree, aoi_loss, areaFromRast = TRUE){
## Tree cover
gdalLog <- capture.output(gdalUtilities::gdalinfo(datasetname = aoi_tree, hist = TRUE))
(bucxml <- as.numeric(sub('buckets.+', '', grep('buckets ', gdalLog, value = TRUE))))
(minxml <- as.numeric(gsub('.+from | to.+', '', grep('buckets ', gdalLog, value = TRUE)) ))
(maxxml <- as.numeric(gsub('.+to |:', '', grep('buckets ', gdalLog, value = TRUE))))
(histxml <- as.numeric(strsplit(split = '[[:space:]]', gsub("^ |^  ", "", gdalLog[grep('buckets', gdalLog)+1]))[[1]]))
labs <- seq(from = minxml, to = maxxml, length.out = bucxml)
countsTree <- data.frame(labs, nwlab = c(ceiling(labs[1]),
round(labs[2:(bucxml-1)]),
floor(labs[bucxml])),
val = histxml)
histTree1 <- aggregate(countsTree$val, by = list(countsTree$nwlab), sum)
## Loss
gdalLogLoss <- capture.output(gdalUtilities::gdalinfo(datasetname = aoi_loss, hist = TRUE))
(bucxml <- as.numeric(sub('buckets.+', '', grep('buckets ', gdalLogLoss, value = TRUE))))
(minxml <- as.numeric(gsub('.+from | to.+', '', grep('buckets ', gdalLogLoss, value = TRUE)) ))
(maxxml <- as.numeric(gsub('.+to |:', '', grep('buckets ', gdalLogLoss, value = TRUE))))
(histxml <- as.numeric(strsplit(split = '[[:space:]]', gsub("^ |^  ", "", gdalLogLoss[grep('buckets', gdalLogLoss)+1]))[[1]]))
labs <- seq(from = minxml, to = maxxml, length.out = bucxml)
countsLoss <- data.frame(labs, nwlab = c(ceiling(labs[1]),
round(labs[2:(bucxml-1)]),
floor(labs[bucxml])),
val = histxml)
histLoss1 <- aggregate(countsLoss$val, by = list(countsLoss$nwlab), sum)
colnames(histLoss1) <- colnames(histTree1) <- c('cat', 'count')
##pixArea
pixArea <- prod(abs(as.numeric(gsub(" |[[:alpha:]]|([.-])|[[:punct:]]", "\\1",
strsplit(grep('Pixel Size ', gdalLogLoss, value = TRUE), ',')[[1]]))))/1000000
if(areaFromRast){
areaRast <- raster(aoi_loss)
pixArea <- median(area(areaRast)[], na.rm = TRUE)
}
tree1Thres <- sum(subset(histTree1, cat >= ebvporcrangenum[1] & cat <= ebvporcrangenum[2])$count) * pixArea
loss1Thres <- subset(histLoss1, count > 0)
loss1Thres$count <- loss1Thres$count * pixArea
result1 <- data.frame(year = as.numeric(loss1Thres$cat) + 2000,
area = tree1Thres - (cumsum(c(0, subset(loss1Thres, cat != 0)$count) )) )
} # 1.54
library(gdalUtilities)
library(raster)
library(rgeos)
library(rgdal)
tree <- 'X:/datproj/forest/hansen/mosaic_tree_crop.tif'
loss <- 'X:/datproj/forest/hansen/mosaic_loss_crop.tif'
sapply(paste0(c(tree, loss), '.aux.xml'), file.remove) # remove metadata
t1 <- raster(tree)
l1 <- raster(loss)
ebvporcrangenum <- c(80, 100)
basins <- c('X:/datproj/basins/CO/Zonificacion_hidrografica_2013_316.shp',
'X:/datproj/basins/EC/EC_un_hid_N5_50k_2020_570.shp',
'X:/datproj/basins/PE/PE_UH_231.shp')
b = 3
shp <- readOGR(basins[b])
pref <- basename(dirname(basins[b]))
for(i in 1:nrow(shp)){ # i = 15
shp.i <- shp[i, ]
if(shp.i@proj4string@projargs != t1@crs@projargs){
shp.i <- spTransform(shp.i, CRSobj = CRS(t1@crs@projargs))
}
aoi_tree <- paste0(outDir, '/', pref, '_tree_', i ,'.tif')
aoi_loss <-  paste0(outDir, '/', pref, '_loss_', i ,'.tif')
aoi_shp <- paste0(outDir, '/', pref, '_aoi_', i)
writeOGR(shp.i, dsn = outDir,
layer = basename(aoi_shp),
driver = 'ESRI Shapefile', overwrite_layer = TRUE)
system.time(gdalUtilities::gdalwarp(srcfile = tree, dstfile = aoi_tree,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
overwrite = TRUE,
crop_to_cutline = TRUE
))
system.time(gdalUtilities::gdalwarp(srcfile = loss, dstfile = aoi_loss,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
crop_to_cutline = TRUE,
overwrite = TRUE))
defAoi <- tryCatch(defTable(aoi_tree = aoi_tree, aoi_loss = aoi_loss, TRUE),
error = function(e) NULL)
if(is.null(defAoi)) next
defAoi$areaBas <- raster::area(shp.i)/1000000
defAoi$porcfor <- defAoi$area/defAoi$areaBas * 100
save(defAoi, file = paste0(outDir, '/', pref, '_def_', i ,'.RData'))
file.remove(aoi_loss, aoi_tree)
sapply(paste0(c(aoi_loss, aoi_tree), '.aux.xml'), file.remove) # remove metadata
sapply(paste0(aoi_shp, c('.dbf','.prj', '.shp', '.shx')), file.remove) # remove metadata
}
outDir <- 'X:/datproj/sandbox/def_bas'; dir.create(outDir)
shp <- readOGR(basins[b])
for(i in 1:nrow(shp)){ # i = 15
shp.i <- shp[i, ]
if(shp.i@proj4string@projargs != t1@crs@projargs){
shp.i <- spTransform(shp.i, CRSobj = CRS(t1@crs@projargs))
}
aoi_tree <- paste0(outDir, '/', pref, '_tree_', i ,'.tif')
aoi_loss <-  paste0(outDir, '/', pref, '_loss_', i ,'.tif')
aoi_shp <- paste0(outDir, '/', pref, '_aoi_', i)
writeOGR(shp.i, dsn = outDir,
layer = basename(aoi_shp),
driver = 'ESRI Shapefile', overwrite_layer = TRUE)
system.time(gdalUtilities::gdalwarp(srcfile = tree, dstfile = aoi_tree,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
overwrite = TRUE,
crop_to_cutline = TRUE
))
system.time(gdalUtilities::gdalwarp(srcfile = loss, dstfile = aoi_loss,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
crop_to_cutline = TRUE,
overwrite = TRUE))
defAoi <- tryCatch(defTable(aoi_tree = aoi_tree, aoi_loss = aoi_loss, TRUE),
error = function(e) NULL)
if(is.null(defAoi)) next
defAoi$areaBas <- raster::area(shp.i)/1000000
defAoi$porcfor <- defAoi$area/defAoi$areaBas * 100
save(defAoi, file = paste0(outDir, '/', pref, '_def_', i ,'.RData'))
file.remove(aoi_loss, aoi_tree)
sapply(paste0(c(aoi_loss, aoi_tree), '.aux.xml'), file.remove) # remove metadata
sapply(paste0(aoi_shp, c('.dbf','.prj', '.shp', '.shx')), file.remove) # remove metadata
}
shp.i <- shp[i, ]
i
shp.i <- shp[i, ]
if(shp.i@proj4string@projargs != t1@crs@projargs){
shp.i <- spTransform(shp.i, CRSobj = CRS(t1@crs@projargs))
}
aoi_tree <- paste0(outDir, '/', pref, '_tree_', i ,'.tif')
aoi_loss <-  paste0(outDir, '/', pref, '_loss_', i ,'.tif')
aoi_shp <- paste0(outDir, '/', pref, '_aoi_', i)
writeOGR(shp.i, dsn = outDir,
layer = basename(aoi_shp),
driver = 'ESRI Shapefile', overwrite_layer = TRUE)
system.time(gdalUtilities::gdalwarp(srcfile = tree, dstfile = aoi_tree,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
overwrite = TRUE,
crop_to_cutline = TRUE
))
tgdal <- gdalUtilities::gdalwarp(srcfile = tree, dstfile = aoi_tree,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
overwrite = TRUE,
crop_to_cutline = TRUE
)
tgdal <- tryCatch(gdalUtilities::gdalwarp(srcfile = tree, dstfile = aoi_tree,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
overwrite = TRUE,
crop_to_cutline = TRUE
), error = function(e) NULL)
tgdal
for(i in 1:nrow(shp)){ # i = 15
shp.i <- shp[i, ]
if(shp.i@proj4string@projargs != t1@crs@projargs){
shp.i <- spTransform(shp.i, CRSobj = CRS(t1@crs@projargs))
}
aoi_tree <- paste0(outDir, '/', pref, '_tree_', i ,'.tif')
aoi_loss <-  paste0(outDir, '/', pref, '_loss_', i ,'.tif')
aoi_shp <- paste0(outDir, '/', pref, '_aoi_', i)
writeOGR(shp.i, dsn = outDir,
layer = basename(aoi_shp),
driver = 'ESRI Shapefile', overwrite_layer = TRUE)
tgdal <- tryCatch(gdalUtilities::gdalwarp(srcfile = tree, dstfile = aoi_tree,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
overwrite = TRUE,
crop_to_cutline = TRUE
), error = function(e) NULL)
if(is.null(tgdal)) next
system.time(gdalUtilities::gdalwarp(srcfile = loss, dstfile = aoi_loss,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
crop_to_cutline = TRUE,
overwrite = TRUE))
defAoi <- tryCatch(defTable(aoi_tree = aoi_tree, aoi_loss = aoi_loss, TRUE),
error = function(e) NULL)
if(is.null(defAoi)) next
defAoi$areaBas <- raster::area(shp.i)/1000000
defAoi$porcfor <- defAoi$area/defAoi$areaBas * 100
save(defAoi, file = paste0(outDir, '/', pref, '_def_', i ,'.RData'))
file.remove(aoi_loss, aoi_tree)
sapply(paste0(c(aoi_loss, aoi_tree), '.aux.xml'), file.remove) # remove metadata
sapply(paste0(aoi_shp, c('.dbf','.prj', '.shp', '.shx')), file.remove) # remove metadata
}
for(i in 1:nrow(shp)){ # i = 15
shp.i <- shp[i, ]
if(shp.i@proj4string@projargs != t1@crs@projargs){
shp.i <- spTransform(shp.i, CRSobj = CRS(t1@crs@projargs))
}
aoi_tree <- paste0(outDir, '/', pref, '_tree_', i ,'.tif')
aoi_loss <-  paste0(outDir, '/', pref, '_loss_', i ,'.tif')
aoi_shp <- paste0(outDir, '/', pref, '_aoi_', i)
writeOGR(shp.i, dsn = outDir,
layer = basename(aoi_shp),
driver = 'ESRI Shapefile', overwrite_layer = TRUE)
tgdal <- tryCatch(gdalUtilities::gdalwarp(srcfile = tree, dstfile = aoi_tree,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
overwrite = TRUE,
crop_to_cutline = TRUE
), error = function(e) NULL)
if(is.null(tgdal)) next
system.time(gdalUtilities::gdalwarp(srcfile = loss, dstfile = aoi_loss,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
crop_to_cutline = TRUE,
overwrite = TRUE))
defAoi <- tryCatch(defTable(aoi_tree = aoi_tree, aoi_loss = aoi_loss, TRUE),
error = function(e) NULL)
if(is.null(defAoi)) next
defAoi$areaBas <- raster::area(shp.i)/1000000
defAoi$porcfor <- defAoi$area/defAoi$areaBas * 100
save(defAoi, file = paste0(outDir, '/', pref, '_def_', i ,'.RData'))
file.remove(aoi_loss, aoi_tree)
sapply(paste0(c(aoi_loss, aoi_tree), '.aux.xml'), file.remove) # remove metadata
sapply(paste0(aoi_shp, c('.dbf','.prj', '.shp', '.shx')), file.remove) # remove metadata
}
i
for(i in 230:nrow(shp)){ # i = 15
print(i)
shp.i <- shp[i, ]
if(shp.i@proj4string@projargs != t1@crs@projargs){
shp.i <- spTransform(shp.i, CRSobj = CRS(t1@crs@projargs))
}
aoi_tree <- paste0(outDir, '/', pref, '_tree_', i ,'.tif')
aoi_loss <-  paste0(outDir, '/', pref, '_loss_', i ,'.tif')
aoi_shp <- paste0(outDir, '/', pref, '_aoi_', i)
writeOGR(shp.i, dsn = outDir,
layer = basename(aoi_shp),
driver = 'ESRI Shapefile', overwrite_layer = TRUE)
tgdal <- tryCatch(gdalUtilities::gdalwarp(srcfile = tree, dstfile = aoi_tree,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
overwrite = TRUE,
crop_to_cutline = TRUE
), error = function(e) NULL)
if(is.null(tgdal)) next
system.time(gdalUtilities::gdalwarp(srcfile = loss, dstfile = aoi_loss,
#csql = paste0("select ST_GeomFromText('", writeWKT(wkt_pcs, byid = F), "')"),
cutline = paste0(aoi_shp, '.shp'),
dstnodata = 999,
crop_to_cutline = TRUE,
overwrite = TRUE))
defAoi <- tryCatch(defTable(aoi_tree = aoi_tree, aoi_loss = aoi_loss, TRUE),
error = function(e) NULL)
if(is.null(defAoi)) next
defAoi$areaBas <- raster::area(shp.i)/1000000
defAoi$porcfor <- defAoi$area/defAoi$areaBas * 100
save(defAoi, file = paste0(outDir, '/', pref, '_def_', i ,'.RData'))
file.remove(aoi_loss, aoi_tree)
sapply(paste0(c(aoi_loss, aoi_tree), '.aux.xml'), file.remove) # remove metadata
sapply(paste0(aoi_shp, c('.dbf','.prj', '.shp', '.shx')), file.remove) # remove metadata
}
nrow(shp)
b
pref
shiny::runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example5_leafletInteraction')
runApp('IAvH/V2/08_SSD')
runApp('IG/server_IG/hack')
runApp('Phd/ShinyHoloviz_2021-05-20/Shiny/Example5_leafletInteraction')
runApp('call4code/frontend')
runApp('call4code/frontend')
runApp('call4code/frontend')
runApp('call4code/frontend')
runApp('call4code/frontend')
